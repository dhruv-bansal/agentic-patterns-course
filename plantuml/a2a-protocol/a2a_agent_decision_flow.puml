@startuml A2A_Agent_Decision_Making_Process

!theme cerulean-outline
skinparam backgroundColor #FAFAFA
skinparam activityBorderColor #2E7D8C
skinparam activityBackgroundColor #E8F4F8

title A2A Protocol: Agent Decision Making & Selection Flow

|User Request|
start
:User submits complex task request;
note right
  Example: "Create a marketing campaign 
  based on sales data analysis"
end note

|Client Agent|
:Parse user request;
:Identify task complexity;

if (Task requires multiple specializations?) then (yes)
  :Query Central Agent Registry;
  :Retrieve available Agent Cards;
  
  |Agent Discovery|
  :Parse Agent Cards for:
  - Skills & Capabilities
  - Input/Output Modes 
  - Example Use Cases
  - Transport Protocols;
  
  :Build capability matrix;
  note right
    Agent Card Analysis:
    - Data Agent: ["analytics", "statistics", "csv"]
    - Content Agent: ["writing", "marketing", "pdf"]
    - Planner Agent: ["coordination", "workflow"]
  end note
  
  |Planning Agent Selection|
  :Select Planner Agent based on:
  - Multi-agent coordination skills
  - Task orchestration capabilities
  - Compatible transport protocols;
  
  :Send task to Planner Agent;
  
  |Planner Agent Logic|
  :Receive and analyze task;
  :Break down into atomic subtasks;
  
  fork
    :Subtask 1: Data Analysis
    Required Skills:
    - Statistical analysis
    - Data visualization
    - CSV/JSON processing;
  fork again
    :Subtask 2: Content Creation
    Required Skills:
    - Marketing copywriting
    - Document generation
    - Visual design;
  fork again
    :Subtask 3: Campaign Strategy
    Required Skills:
    - Strategic planning
    - Market analysis
    - Recommendation engine;
  end fork
  
  :For each subtask, query registry;
  :Match subtask requirements to agent skills;
  
  |Agent Selection Algorithm|
  repeat :For each subtask;
    :Extract required capabilities;
    :Filter agents by skill tags;
    :Check input/output compatibility;
    :Verify authentication requirements;
    :Score agents by skill match;
    :Select highest scoring agent;
    backward :Next subtask;
  repeat while (More subtasks?) is (yes)
  
  |Task Orchestration|
  :Create execution dependency graph;
  note right
    Execution Order:
    1. Data Analysis Agent (independent)
    2. Content Agent (depends on #1)
    3. Strategy Agent (depends on #1, #2)
  end note
  
  fork
    |Data Agent Execution|
    :Send task to Data Analysis Agent;
    :Agent processes CSV data;
    :Returns analysis artifacts;
  fork again
    |Content Agent Execution|
    :Wait for data analysis completion;
    :Send task to Content Generation Agent;
    :Include data analysis results;
    :Agent creates marketing content;
  fork again
    |Strategy Agent Execution|
    :Wait for data + content completion;
    :Send task to Strategy Planning Agent;
    :Include all previous artifacts;
    :Agent creates campaign strategy;
  end fork
  
  :Aggregate all agent results;
  :Validate task completion;
  :Return consolidated artifacts;
  
else (no)
  |Single Agent Flow|
  :Identify required capabilities;
  :Query registry for matching agents;
  :Select best matching agent;
  :Send task directly to agent;
  :Receive and return results;
endif

|Result Delivery|
:Return final results to user;
stop

@enduml
